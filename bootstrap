#!/usr/bin/env bash
DOTFILES=$HOME/.dotfiles
OS=$(uname)

Info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

User () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

Success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

Fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

Usage() {
	echo "Usage: $0 [packages] - use packages to install OS specific packages"
	exit 0
}

link_file() {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        User "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      Success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      Success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      Success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    Success "linked $1 to $2"
  fi
}

case $1 in
	packages)
		if [ -f $DOTFILES/packages/$OS ]
		then
			$DOTFILES/packages/$OS
		else
			 Fail "Unsupported OS: ${OS}"
		fi
		echo "Install Go packages"
		for pkg in $(cat $DOTFILES/packages/GoPackages)
		do
			go get -u $pkg
		done
		;;
	usage|help)
		Usage
esac

Dotfiles_install() {
	Info 'installing dotfiles'
	local overwrite_all=false backup_all=false skip_all=false

	for src in $(find -H "$DOTFILES" -maxdepth 2 -name '*.symlink')
	do
		dst="$HOME/.$(basename "${src%.*}")"
		link_file "$src" "$dst"
	done
}

Dotfiles_install

# look for install.sh and execute
find $DOTFILES -name install.sh | while read installer ; do sh -c "${installer}" ; done
